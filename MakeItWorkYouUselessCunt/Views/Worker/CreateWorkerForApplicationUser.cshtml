@model ManagementSystemVersionTwo.ViewModels.CreateWorker
@{
    ViewBag.Title = "CreateWorkerForApplicationUser";

}

<div class="row">
    <div class="col-12 grid-margin">
        <div class="card">
            <div class="card-body">
                <h2 style="text-align: center;">Add New Person</h2>

                <img src="" alt="Profile Pic" style="display: block; margin-left: auto; margin-right: auto; width: 250px; border: 2px solid #00ff21; border-radius: 4px;" class="" id="pic">
                @using (Html.BeginForm("CreateWorkerForApplicationUser", "Worker", FormMethod.Post, new { enctype = "multipart/form-data", autocomplete = "off" , onsubmit= "validateJPG() && validatePDF();" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.userID)
                    <form class="form-sample">
                        <h4 class="card-description"> Personal info </h4>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">First Name</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => Model.FirstName, new { placeholder = "Enter your name", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.FirstName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Last Name</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => Model.LastName, new { placeholder = "Enter your Last name", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.LastName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Gender</label>
                                    <div class="col-sm-9">
                                        @Html.DropDownListFor(s => Model.Gender, Model.DropDownDataForGender, "Select Gender", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.Gender, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Date of Birth</label>
                                    <div class="col-sm-9">
                                        @Html.EditorFor(m => Model.DateOfBirth, new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.DateOfBirth, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Address </label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => Model.Address, new { placeholder = "Enter your Address", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.Address, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h4 class="card-description"> Company </h4>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Department</label>
                                    <div class="col-sm-9">
                                        @Html.DropDownListFor(m => Model.IdOfDepartment, new SelectList(Model.AllDepartments, "ID", "City"), "Select Department", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.IdOfDepartment, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Role</label>
                                    <div class="col-sm-9">
                                        @Html.DropDownListFor(s => Model.SelectedRole, new SelectList(Model.Roles, "ID", "Name"), "Select Role", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.SelectedRole, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <h4 class="card-description"> Addition Info </h4>
                        <div class="row">



                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Bank Account</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => Model.BankAccount, new { placeholder = "Enter your Card Number", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.BankAccount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group row">
                                    <label class="col-sm-3 col-form-label">Salary</label>
                                    <div class="col-sm-9">
                                        @Html.TextBoxFor(m => Model.Salary, new { placeholder = "Salary", @class = "form-control" })
                                        @Html.ValidationMessageFor(m => Model.Salary, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>CV</label>
                                    <input type="file" name="img[]" class="file-upload-default">
                                    <div class="input-group col-md-12">

                                        @Html.TextBoxFor(m => Model.CV, new { type = "file", accept = "application/pdf", @class = "form-control file-upload-info", id = "filePDF" })
                                        @Html.ValidationMessageFor(m => Model.CV, "", new { @class = "text-danger", id = "errorPDF" })

                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Contract of Employement</label>
                                    <input type="file" name="img[]" class="file-upload-default">
                                    <div class="input-group col-md-12">
                                        @Html.TextBoxFor(m => Model.ContractOfEmployment, new {   type = "file", accept = "application/pdf", @class = "form-control file-upload-info" , id="filePDF" })
                                        @Html.ValidationMessageFor(m => Model.ContractOfEmployment, "", new { @class = "text-danger",id= "errorPDF" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    <label>Profile Picture</label>
                                    <input type="file" name="img[]" class="file-upload-default">
                                    <div class="input-group col-md-12">
                                        @Html.TextBoxFor(m => Model.ProfilePicture, new { onchange = "ChangePic(this)", type = "file", accept = "image/jpeg", @class = "form-control file-upload-info", id = "fileJPG" })
                                        @Html.ValidationMessageFor(m => Model.ProfilePicture, "", new { @class = "text-danger"})
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div style="justify-content: center;" class="row col-md-12">
                            <button type="submit" class="btn btn-success mr-2">Submit</button>
                            <button class="btn btn-light">Cancel</button>
                        </div>


                    </form>
                }
            </div>
        </div>
    </div>
</div>
<script>


    //Birth
    function birthVal() {
        let now = new Date();
        let birth = document.getElementById('DateOfBirth');
        let birthObj = new Date(birth.value);
        if (((now.getFullYear() - birthObj.getFullYear()) < 18) || ((now.getFullYear() - birthObj.getFullYear()) > 100)) {
            var dateerror = "Eligible ages are between 18 and 100.";
            document.getElementById('dateError').innerText = dateerror;
            return false;
        } else {
            return true;
        }
    }

    //PDF
    var err = document.getElementById('errorPDF');
    var fil = document.getElementById('filePDF');

    function validatePDF() {
        var file = fil.value;
        var len = file.length;
        var ext = file.slice(len - 4, len);
        if (ext.toUpperCase() == ".PDF") {
            return true;
        }
        else {
            return false;
            err.innerHTML = "Only PDF files allowed.";
        }
    }

    function formOK() {
        if (validatePDF() === false) {
            return false;
        } else {
            return true;
        }
    }


    //JPG
    var err1 = document.getElementById('errorJPG');
    var fil1 = document.getElementById('fileJPG');

    function validateJPG() {
        var file = fil1.value;
        var len = file.length;
        var ext = file.slice(len - 4, len);
        if (ext.toUpperCase() == ".JPG") {
            return true;
        }
        else {
            return false;
            err1.innerHTML = "Only JPEG files allowed.";
        }
    }

    function formOK1() {
        if (validateJPG() === false) {
            return false;
        } else {
            return true;
        }
    }

    //Pic
    document.getElementById("pic").style.display = "none";
    function ChangePic(input) {
        var pic = document.getElementById("pic");
        var temp = pic.src;
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                pic.src = e.target.result;
            }
            reader.readAsDataURL(input.files[0]);
        } else {
            pic.src = temp;
        }
        pic.style.display = "block";
    }

</script>
